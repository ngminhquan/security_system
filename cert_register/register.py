import struct
import binascii
import sha256
import rsa_algorithm as rsa

#Cặp khóa của CA (dùng để kí, giải mã cert)

p = 303953423661034916093096644870386209181207882190109489802359407814502178204142880456445845400114949390822809700510973804482088607676275375723726772362211612693844376393028541697210763896181255064839684797019197009985280246124161704265682628819777866911221637690304160465221385233230380509247180540947915227323
q = 342653238510123978583794870696242261004803035710088264440592564382719948800396946614784025713205403091499081989303381711601358363277859151979593270123243511681701790226412922512915715094845777002654106954264206822893542568341511517207826332082521242203378259625570761581107399830541200268038439973411801314211
e = 58586957418369495224362637833285779962524952838512825773193522788704424363062507175839201425023817062221566236988488060015620365304181095272689538303568528435715695497302179664466905546903933272496909594445287352269089861047855052941457726673530474894667890816834863527316149894015124446848126505918091307529419852193697076187682262834261000089180672890250362336875616829452264897275479344987082219836310327557251283263894138190531331072449636735334855778799565389702018638126966987304956184436325298453541919619469047723885790031829147985298676066674175975771367167157473914209040515270148337365532558615606453666693
d = 60888307194732098836418130500621005400154488806885389863827584218335898445301811441782188676231273630717821720858508421492130956966195244475211078850661321717432556234216511467770425208590451532535886355568945514146676426356422420012852173429530564118592070656010236260101289622474400192695511846804178035065754857706839021596389005386710538426428527180236963701464008225469357790634753580506885152493742227070827648145147242402028606246919622852604006518326301816545827201296600032308297649079961994946031402905808646474432777480424013688804935664469093536027249917336151959154331679559132127715955041090207745880597
phi =(q-1)*(p-1)
n = q*p



#thuật toán đăng ký cert cho từng user
class register(object):
    def __init__(self, nonce) -> None:
        self._nonce: bytes = nonce

    #RSA encrypt, using PK
    def rsa_encrypt(self, text: bytes) -> bytes:
        text = sha256.bytes_to_long(text)
        ciphertext = rsa.encrypt(text, e, n)
        ciphertext = sha256.long_to_bytes(ciphertext)
        return ciphertext

    #sent message
    def signing(self, message: bytes) -> bytes:     #message = ID(A) || PU(A)
        self._msg: bytes = message
        self._msg_len: int = len(message)
       
        payload = self.plaintext_gen()

        #payload -> digest 256bit -> encrypt RSA
        digest = sha256.hash_function(payload)      
        signature = self.rsa_encrypt(digest) 

        cp = payload + signature
        return cp
   


    def plaintext_gen(self) -> bytes:
        # Formatting control information and nonce
        self.q:int = 15 - len(self._nonce)  # length of Q, the encoded message length

        flags: int = self.q - 1
        b_0: bytes = struct.pack("B", flags) + self._nonce + sha256.long_to_bytes(len(self._msg), self.q)
     
        b = b_0 + self._msg
        return b

a = register(b'123456')
m = b'minhquan'

cpt = a.signing(m)
with open('cert.txt','w',encoding='utf-8') as cert :
    cert.write(cpt)

